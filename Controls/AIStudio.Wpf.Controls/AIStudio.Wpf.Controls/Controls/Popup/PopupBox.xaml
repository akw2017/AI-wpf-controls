<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:converter="clr-namespace:AIStudio.Wpf.Controls.Converter"
                    xmlns:controls="clr-namespace:AIStudio.Wpf.Controls"
                    xmlns:system="clr-namespace:System;assembly=System.Runtime">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/AIStudio.Wpf.Controls;component/Themes/Shadows.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/AIStudio.Wpf.Controls;component/Styles/MahApps/Button.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <converter:NullableToVisibilityConverter x:Key="NullVisibilityConverter" />
    <converter:NullableToVisibilityConverter x:Key="InvertedNullVisibilityConverter" NullValue="Visible" NotNullValue="Collapsed" />
    <converter:BrushRoundConverter x:Key="BrushRoundConverter"/>
    <converter:ShadowConverter x:Key="ShadowConverter"/>

    <Path x:Key="PopupBoxToggleContent" x:Shared="False" Margin="4 0 4 0" Width="24" Height="24" 
                  Data="M12,16A2,2 0 0,1 14,18A2,2 0 0,1 12,20A2,2 0 0,1 10,18A2,2 0 0,1 12,16M12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12A2,2 0 0,1 12,10M12,4A2,2 0 0,1 14,6A2,2 0 0,1 12,8A2,2 0 0,1 10,6A2,2 0 0,1 12,4Z"
                  Fill="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=controls:PopupBox}, Path=Foreground}" />
    
    <SolidColorBrush x:Key="FlatButtonRipple" Color="#FFB6B6B6" po:Freeze="True" />

    <Style x:Key="SeparatorStyle" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Accent}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MahApps.Brushes.Control.Border}"/>
        <Setter Property="MinHeight" Value="1"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Rectangle Height="1" Fill="{TemplateBinding Background}"
                               HorizontalAlignment="Stretch" VerticalAlignment="Center"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToolTip}" x:Key="ToolTipStyle">
        <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.Accent}" />
        <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.ThemeForeground}" />
        <Setter Property="Padding" Value="8" />
        <Setter Property="Placement" Value="Custom" />
        <Setter Property="CustomPopupPlacementCallback" Value="{x:Static controls:TipAttach.CustomPopupPlacementCallback}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="2" Margin="{TemplateBinding Margin}">
                        <ContentPresenter x:Name="ContentPresenter"  
                                          Margin="{TemplateBinding Padding}"
                                          Content="{TemplateBinding ContentControl.Content}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}">
                        </ContentPresenter>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <converter:RangeLengthConverter x:Key="RangeLengthConverter" />
    <converter:MathConverter x:Key="MathAddConverter" Operation="Add" />
    <system:Int32 x:Key="ProgressRingStrokeWidth">8</system:Int32>

    <SolidColorBrush x:Key="AttentionToActionBrush" Color="{StaticResource ShadowColor}" Opacity=".23" po:Freeze="True" />

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2"
                     SnapsToDevicePixels="true"
                     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                     StrokeThickness="1"
                     StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:PopupBox}" x:Key="AIStudio.Styles.PopupBox">
        <Setter Property="ToggleContent" Value="{StaticResource PopupBoxToggleContent}" />
        <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource FlatButtonRipple}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="controls:ShadowAttach.DropShadowEffect" Value="{StaticResource ShadowDepth3}" />
        <Setter Property="TextElement.FontWeight" Value="Normal" />
        <Setter Property="Padding" Value="0 8 0 8" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:PopupBox}">
                    <ControlTemplate.Resources>
                        <Style TargetType="Separator" BasedOn="{StaticResource SeparatorStyle}"/>
                        <Style TargetType="ToggleButton" x:Key="ToggleButtonStyle">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <controls:Ripple Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False"
                                                    ClipToBounds="False"
                                                    controls:RippleAssist.IsCentered="True"
                                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                    Padding="{TemplateBinding Padding}" 
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid>
                        <ToggleButton x:Name="PART_Toggle" Style="{StaticResource ToggleButtonStyle}" IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"
                                      Content="{TemplateBinding ToggleContent}" ContentTemplate="{TemplateBinding ToggleContentTemplate}"
                                      Cursor="Hand"
                                      VerticalAlignment="Center"
                                      />
                        <controls:PopupEx x:Name="PART_Popup" IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"
                                            CustomPopupPlacementCallback="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupPlacementMethod}"                                            
                                            HorizontalOffset="5"
                                            VerticalOffset="5"
                                            PlacementTarget="{Binding ElementName=PART_Toggle}"
                                            Placement="Custom"
                                            PopupAnimation="Fade"
                                            AllowsTransparency="True">
                            <controls:Card Content="{TemplateBinding PopupContent}" ContentTemplate="{TemplateBinding PopupContentTemplate}"
                                      Foreground="{DynamicResource MahApps.Brushes.ThemeBackground}"
                                      FontSize="15"
                                      FontWeight="Regular"
                                      Padding="{TemplateBinding Padding}"
                                      RenderOptions.ClearTypeHint="Enabled"                                      
                                      Margin="5">
                                <controls:Card.Resources>
                                    <Style TargetType="{x:Type Button}">
                                        <Setter Property="VerticalContentAlignment" Value="Bottom" />
                                        <Setter Property="HorizontalContentAlignment" Value="Left" />
                                        <Setter Property="Padding" Value="16 0 16 16" />
                                        <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.ThemeBackground}" />
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Button}">
                                                    <Grid>
                                                        <VisualStateManager.VisualStateGroups>
                                                            <VisualStateGroup Name="CommonStates">
                                                                <VisualStateGroup.Transitions>
                                                                    <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                                                                        <VisualTransition.GeneratedEasingFunction>
                                                                            <CircleEase EasingMode="EaseOut"/>
                                                                        </VisualTransition.GeneratedEasingFunction>
                                                                    </VisualTransition>
                                                                </VisualStateGroup.Transitions>
                                                                <VisualState Name="Normal"/>
                                                                <VisualState Name="MouseOver">
                                                                    <Storyboard>
                                                                        <DoubleAnimation Storyboard.TargetName="MouseOverBorder" Storyboard.TargetProperty="Opacity"
                                                                                         To="0.1" Duration="0"/>
                                                                    </Storyboard>
                                                                </VisualState>
                                                                <VisualState Name="Disabled">
                                                                    <Storyboard>
                                                                        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                                                         To="0.48" Duration="0"/>
                                                                    </Storyboard>
                                                                </VisualState>
                                                            </VisualStateGroup>
                                                        </VisualStateManager.VisualStateGroups>
                                                        <Border x:Name="MouseOverBorder"
                                                                Opacity="0"
                                                                Background="{TemplateBinding Foreground, Converter={StaticResource BrushRoundConverter}}"/>
                                                        <controls:Ripple Feedback="{TemplateBinding Foreground, Converter={StaticResource BrushRoundConverter}}"
                                                                    Focusable="False"
                                                                    MinHeight="48"
                                                                    Content="{TemplateBinding Content}"
                                                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"                                                                
                                                                    Padding="{TemplateBinding Padding}"/>
                                                    </Grid>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </controls:Card.Resources>
                            </controls:Card>
                        </controls:PopupEx>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignToolPopupBox" BasedOn="{StaticResource AIStudio.Styles.PopupBox}" TargetType="controls:PopupBox">
        <Setter Property="Foreground" Value="#616161" />
        <Setter Property="Padding" Value="4"/>
    </Style>

    <Style x:Key="MaterialDesignToolForegroundPopupBox" BasedOn="{StaticResource MaterialDesignToolPopupBox}" TargetType="controls:PopupBox">
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"/>
    </Style>

    <Path x:Shared="False" x:Key="MultiFloatingActionPopupBoxIcon" Width="24" Height="24" 
          Data="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z" 
          Fill="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=controls:PopupBox}, Path=Foreground}" />

    <Style TargetType="{x:Type controls:PopupBox}" x:Key="MaterialDesignMultiFloatingActionPopupBox">
        <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Accent}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MahApps.Brushes.Control.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.ThemeBackground}"/>
        <Setter Property="controls:RippleAssist.Feedback" Value="White" />
        <Setter Property="PlacementMode" Value="TopAndAlignCentres" />
        <Setter Property="PopupMode" Value="MouseOverEager" />
        <Setter Property="ToolTipService.Placement" Value="Left" />
        <Setter Property="ToolTipService.IsEnabled" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="controls:ShadowAttach.DropShadowEffect" Value="{StaticResource ShadowDepth2}" />
        <Setter Property="Width" Value="56" />
        <Setter Property="Height" Value="56" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:PopupBox}">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource ToolTipStyle}">
                            <Style.Setters>
                                <Setter Property="Margin" Value="8 10 8 10" />
                            </Style.Setters>
                        </Style>
                        <Style TargetType="ToggleButton" x:Key="ToggleButtonStyle">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <Grid x:Name="RootGrid" Background="{x:Null}">
                                            <VisualStateManager.VisualStateGroups>
                                                <VisualStateGroup Name="CheckedStates">
                                                    <VisualStateGroup.Transitions>
                                                        <VisualTransition From="*" To="Checked">
                                                            <Storyboard>
                                                                <DoubleAnimation Storyboard.TargetName="ContentRotateTransform"
                                                                                 Storyboard.TargetProperty="Angle"
                                                                                 To="45"
                                                                                 Duration="0:0:0.1">
                                                                    <DoubleAnimation.EasingFunction>
                                                                        <QuadraticEase EasingMode="EaseInOut" />
                                                                    </DoubleAnimation.EasingFunction>
                                                                </DoubleAnimation>
                                                            </Storyboard>
                                                        </VisualTransition>
                                                        <VisualTransition From="Checked" To="Unchecked">
                                                            <Storyboard>
                                                                <DoubleAnimation Storyboard.TargetName="ContentRotateTransform"
                                                                                 Storyboard.TargetProperty="Angle"
                                                                                 To="0"
                                                                                 Duration="0:0:0.1">
                                                                    <DoubleAnimation.EasingFunction>
                                                                        <QuadraticEase EasingMode="EaseInOut" />
                                                                    </DoubleAnimation.EasingFunction>
                                                                </DoubleAnimation>
                                                            </Storyboard>
                                                        </VisualTransition>
                                                    </VisualStateGroup.Transitions>
                                                    <VisualState x:Name="Checked">
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="ContentRotateTransform"
                                                                             Storyboard.TargetProperty="Angle"
                                                                             To="45"
                                                                             Duration="0" />
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState x:Name="Unchecked">
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="ContentRotateTransform"
                                                                             Storyboard.TargetProperty="Angle"
                                                                             To="0"
                                                                             Duration="0" />
                                                        </Storyboard>
                                                    </VisualState>
                                                </VisualStateGroup>
                                            </VisualStateManager.VisualStateGroups>
                                            <!--<AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(controls:ControlAttach.CacheMode)}">-->
                                                <Ellipse Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" 
                                                         Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ShadowAttach.DropShadowEffect),Converter={StaticResource ShadowConverter}}"
                                                         x:Name="border">
                                                </Ellipse>
                                            <!--</AdornerDecorator>-->
                                            <controls:Ripple Focusable="False"  
                                                        Clip="{Binding ElementName=GeometryEllipse, Path=RenderedGeometry}" ClipToBounds="True"
                                                        controls:RippleAssist.IsCentered="True"
                                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                        Padding="{TemplateBinding Padding}" 
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                                <!-- additional layer so we don't rotate the ripple directly which can cause jumpyness under certain layouts -->
                                                <ContentControl Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                RenderTransformOrigin=".5,.5" Focusable="False">
                                                    <ContentControl.RenderTransform>
                                                        <RotateTransform x:Name="ContentRotateTransform" Angle="0" />
                                                    </ContentControl.RenderTransform>
                                                </ContentControl>
                                            </controls:Ripple>
                                            <Ellipse x:Name="GeometryEllipse" Fill="Transparent" IsHitTestVisible="False" Focusable="False" />
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsEnabled" Value="false">
                                                <Setter Property="Opacity" Value="0.23"/>
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="border" Property="controls:ShadowAttach.Darken" Value="True" />
                                            </Trigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=controls:PopupBox}, Path=PopupMode}"
                                                         Value="{x:Static controls:PopupBoxPopupMode.MouseOver}">
                                                <Setter TargetName="RootGrid" Property="Background" Value="Transparent" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=controls:PopupBox}, Path=PopupMode}"
                                                         Value="{x:Static controls:PopupBoxPopupMode.MouseOverEager}">
                                                <Setter TargetName="RootGrid" Property="Background" Value="Transparent" />
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                        <Storyboard x:Key="Open">
                            <DoubleAnimation Storyboard.TargetName="PART_PopupContentControl" Storyboard.TargetProperty="Opacity"
                                             To="1" Duration="0:0:0.1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="ExplicitToggleContent" Storyboard.TargetProperty="Opacity"
                                             To="0" Duration="0:0:0.1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="ExplicitToggleCheckedContent" Storyboard.TargetProperty="Opacity"
                                             To="1" Duration="0:0:0.1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="Close">
                            <DoubleAnimation Storyboard.TargetName="PART_PopupContentControl" Storyboard.TargetProperty="Opacity"
                                             Duration="0:0:0.8">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="ExplicitToggleContent" Storyboard.TargetProperty="Opacity"
                                             To="1" Duration="0:0:0.1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="ExplicitToggleCheckedContent" Storyboard.TargetProperty="Opacity"
                                             To="0" Duration="0:0:0.1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <ToggleButton x:Name="PART_Toggle" Style="{StaticResource ToggleButtonStyle}" IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"                                      
                                      Cursor="Hand"
                                      Background="{TemplateBinding Background}"
                                      BorderBrush="{TemplateBinding BorderBrush}"
                                      Foreground="{TemplateBinding Foreground}"
                                      VerticalAlignment="Stretch"
                                      HorizontalAlignment="Stretch"                                      
                                      ToolTip="{TemplateBinding ToolTip}"
                                      ToolTipService.Placement="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=controls:PopupBox}, Path=(ToolTipService.Placement)}">
                            <Grid>
                                <ContentControl x:Name="StandardToggleContent" Content="{TemplateBinding ToggleContent}" ContentTemplate="{TemplateBinding ToggleContentTemplate}"
                                                Visibility="{TemplateBinding ToggleCheckedContent, Converter={StaticResource InvertedNullVisibilityConverter}}" Focusable="False"/>
                                <ContentControl x:Name="ExplicitToggleContent" Content="{TemplateBinding ToggleContent}" ContentTemplate="{TemplateBinding ToggleContentTemplate}"
                                                Visibility="{TemplateBinding ToggleCheckedContent, Converter={StaticResource NullVisibilityConverter}}" Focusable="False"/>
                                <ContentControl x:Name="ExplicitToggleCheckedContent" Content="{TemplateBinding ToggleCheckedContent}" ContentTemplate="{TemplateBinding ToggleCheckedContentTemplate}"
                                                Visibility="{TemplateBinding ToggleCheckedContent, Converter={StaticResource NullVisibilityConverter}}"
                                                Opacity="0"
                                                RenderTransformOrigin=".5,.5"
                                                Focusable="False">
                                    <ContentControl.RenderTransform>
                                        <RotateTransform Angle="-45" />
                                    </ContentControl.RenderTransform>
                                </ContentControl>
                            </Grid>
                        </ToggleButton>
                        <controls:PopupEx x:Name="PART_Popup" 
                                          IsOpen="False"
                                          CustomPopupPlacementCallback="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupPlacementMethod}"                                                                                    
                                          PlacementTarget="{Binding ElementName=PART_Toggle}"
                                          Placement="Custom"
                                          PopupAnimation="None"                                          
                                          AllowsTransparency="True">
                            <Grid>
                                <!-- with PopupBox.PopupMode == MouseOverEager the popup is always open, with 
                                     content hidden. but Transparent doesnt seem to register hit test in the popup.
                                     this opacity is the lowest I could get to register hit test. might try and speak
                                     to MS about this one, I *think* it is a bug -->
                                <Border Background="White" Opacity="0.002" />
                                <ContentControl Content="{TemplateBinding PopupContent}" ContentTemplate="{TemplateBinding PopupContentTemplate}"      
                                                Visibility="{TemplateBinding IsEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"
                                                Margin="5" Padding="8"
                                                Opacity="0" x:Name="PART_PopupContentControl">
                                    <ContentControl.Resources>
                                        <ResourceDictionary>
                                            <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource ToolTipStyle}">
                                                <Style.Setters>
                                                    <Setter Property="Margin" Value="16 4 16 4" />
                                                </Style.Setters>
                                            </Style>
                                            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource AIStudio.Styles.Button.Circle}">
                                                <Style.Setters>
                                                    <Setter Property="ToolTipService.Placement" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=controls:PopupBox}, Path=(ToolTipService.Placement)}"/>
                                                    <Setter Property="ToolTipService.InitialShowDelay" Value="0" />
                                                    <Setter Property="Margin" Value="4" />
                                                </Style.Setters>
                                            </Style>
                                        </ResourceDictionary>
                                    </ContentControl.Resources>
                                </ContentControl>
                            </Grid>
                        </controls:PopupEx>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPopupOpen" Value="True">
                            <Setter TargetName="PART_Popup" Property="IsOpen" Value="True" />
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Open}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource Close}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="PopupMode" Value="MouseOverEager">
                            <Setter TargetName="PART_Popup" Property="IsOpen" Value="True" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ToggleContent" Value="{StaticResource MultiFloatingActionPopupBoxIcon}" />
        <Style.Triggers>
            <Trigger Property="UnfurlOrientation" Value="Horizontal">
                <Setter Property="ToolTipService.Placement" Value="Custom" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type controls:PopupBox}" BasedOn="{StaticResource AIStudio.Styles.PopupBox}" />
</ResourceDictionary>