<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:controls="clr-namespace:AIStudio.Wpf.Controls"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converter="clr-namespace:AIStudio.Wpf.Controls.Converter"
                    xmlns:system="clr-namespace:System;assembly=System.Runtime"
                    xmlns:ie="http://schemas.microsoft.com/expression/2010/interactions">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/AIStudio.Wpf.Controls;component/Themes/Shadows.xaml" />
        <ResourceDictionary Source="pack://application:,,,/AIStudio.Wpf.Controls;component/Themes/Geometries.xaml" />
        <ResourceDictionary Source="pack://application:,,,/AIStudio.Wpf.Controls;component/Styles/MaterialDesign/Border.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <converter:ShadowConverter x:Key="ShadowConverter"/>
    <converter:MathConverter Operation="Divide" x:Key="DivisionMathConverter" />
    <converter:PointValueConverter x:Key="PointValueConverter" />
    <converter:NullableToBoolConverter x:Key="NullableToBoolConverter"/>
    <converter:BrushOpacityConverter x:Key="BrushOpacityConverter"/>
    <converter:MathConverter Operation="Add" x:Key="MathConverter"/>

    <!--AIStudio.Styles.ToggleButton-->
    <Style x:Key="AIStudio.Styles.ToggleButton" TargetType="ToggleButton">
        <Setter Property="controls:ControlAttach.CornerRadius" Value="{DynamicResource DefaultCornerRadius}"/>
        <Setter Property="MinHeight" Value="{DynamicResource DefaultControlHeight}" />
        <Setter Property="Padding" Value="{DynamicResource DefaultControlPadding}" />
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{DynamicResource MaterialDesignToolBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignToolForeground}"/>
        <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="controls:IconAttach.Width" Value="{DynamicResource AIStudio.Icon.Size.Small}"/>
        <Setter Property="controls:IconAttach.Height" Value="{DynamicResource AIStudio.Icon.Size.Small}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Border x:Name="Bg" Background="{TemplateBinding Background}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                CornerRadius="{Binding Path=(controls:ControlAttach.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}"
                                Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ShadowAttach.DropShadowEffect),Converter={StaticResource ShadowConverter}}"/>
                        <controls:Ripple Focusable="False" 
                                         Padding="{TemplateBinding Padding}" 
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" 
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <controls:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="Bg" Path="ActualWidth" />
                                    <Binding ElementName="Bg" Path="ActualHeight" />
                                    <Binding ElementName="Bg" Path="CornerRadius" />
                                    <Binding ElementName="Bg" Path="BorderThickness" />
                                </MultiBinding>
                            </controls:Ripple.Clip>
                            <DockPanel>
                                <Path x:Name="PathMain" DockPanel.Dock="{TemplateBinding controls:IconAttach.Dock}" Width="{TemplateBinding controls:IconAttach.Width}" Height="{TemplateBinding controls:IconAttach.Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding controls:IconAttach.Geometry}"/>
                                <Grid x:Name="padding" DockPanel.Dock="{TemplateBinding controls:IconAttach.Dock}" Margin="5,0,0,0"></Grid>
                                <ContentPresenter x:Name="ContentPresenterMain" RecognizesAccessKey="True" />
                            </DockPanel>
                        </controls:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Bg" Value="{Binding Path=(controls:ControlAttach.Background),RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource BrushOpacityConverter}, ConverterParameter=0.16}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Bg"  Value="{Binding Path=(controls:ControlAttach.Background),RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource BrushOpacityConverter}, ConverterParameter=0.28}" />
                        </Trigger>
                        
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(controls:ControlAttach.Background)}"/>
                            <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(controls:ControlAttach.Background)}"/>
                        </Trigger>
                        <Trigger Property="controls:IconAttach.Geometry" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="padding"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PathMain"/>
                        </Trigger>
                        <Trigger Property="HasContent" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="padding"/>
                        </Trigger>
                        <Trigger Property="Content" Value="">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="padding"/>
                        </Trigger>
                       
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Panel.ZIndex" Value="{x:Static system:Int32.MaxValue}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="controls:ControlAttach.Status" Value="Light">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource PrimaryHueLightBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Mid">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Dark">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource PrimaryHueDarkBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Accent">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource SecondaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Success">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource SuccessBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Info">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource InfoBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Warning">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource WarningBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Danger">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource DangerBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Plain">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource MaterialDesignToolForeground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AIStudio.Styles.ToggleButton.Icon" TargetType="ToggleButton">
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>
        <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="Padding" Value="8"/>
        <Setter Property="controls:IconAttach.Width" Value="{DynamicResource AIStudio.Icon.Size.Small}"/>
        <Setter Property="controls:IconAttach.Height" Value="{DynamicResource AIStudio.Icon.Size.Small}"/>
        <Setter Property="controls:IconAttach.Geometry" Value="{x:Null}"/>
        <Setter Property="controls:IconAttach.GeometrySelected" Value="{x:Null}"/>
        <Setter Property="controls:ControlAttach.CornerRadius" Value="{DynamicResource DefaultCornerRadius}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignToolForeground}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Border x:Name="RootBg" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(controls:ControlAttach.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Border x:Name="Bg" BorderThickness="{TemplateBinding BorderThickness}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                CornerRadius="{Binding Path=(controls:ControlAttach.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}"
                                Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ShadowAttach.DropShadowEffect),Converter={StaticResource ShadowConverter}}">
                            <controls:Ripple Focusable="False"                                          
                                         Padding="{TemplateBinding Padding}" 
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" 
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <controls:Ripple.Clip>
                                    <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                        <Binding ElementName="Bg" Path="ActualWidth" />
                                        <Binding ElementName="Bg" Path="ActualHeight" />
                                        <Binding ElementName="Bg" Path="CornerRadius" />
                                        <Binding ElementName="Bg" Path="BorderThickness" />
                                    </MultiBinding>
                                </controls:Ripple.Clip>
                                <ContentControl>
                                    <Path x:Name="PathIcon" Width="{TemplateBinding controls:IconAttach.Width}" Height="{TemplateBinding controls:IconAttach.Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" Stretch="Uniform" Data="{TemplateBinding controls:IconAttach.Geometry}"/>
                                </ContentControl>
                            </controls:Ripple>
                        </Border>
                        <Border Visibility="Collapsed" CornerRadius="{Binding Path=(controls:ControlAttach.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="BorderChecked" BorderThickness="4" BorderBrush="{TemplateBinding BorderBrush}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Bg" Value="{Binding Path=(controls:ControlAttach.Background),RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource BrushOpacityConverter}, ConverterParameter=0.16}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Bg"  Value="{Binding Path=(controls:ControlAttach.Background),RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource BrushOpacityConverter}, ConverterParameter=0.28}" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="PathIcon" Property="Data" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:IconAttach.GeometrySelected)}"/>
                        </Trigger>                      
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Panel.ZIndex" Value="{x:Static system:Int32.MaxValue}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="controls:ControlAttach.Status" Value="Light">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource PrimaryHueLightBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Mid">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Dark">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource PrimaryHueDarkBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Accent">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource SecondaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Success">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource SuccessBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Info">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource InfoBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Warning">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource WarningBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Danger">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource DangerBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Plain">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource MaterialDesignToolForeground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--AIStudio.Styles.ToggleButton-->
    <Style x:Key="AIStudio.Styles.ToggleButton.Transparent" BasedOn="{StaticResource AIStudio.Styles.ToggleButton}" TargetType="ToggleButton">
        <Setter Property="MinHeight" Value="6" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="controls:ControlAttach.Background" Value="Transparent"/>
    </Style>

    <!--AIStudio.Styles.ToggleButton-->
    <Style x:Key="AIStudio.Styles.ToggleButton.Icon.Transparent" BasedOn="{StaticResource AIStudio.Styles.ToggleButton.Icon}" TargetType="ToggleButton">
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <!--开关-->
    <Style x:Key="AIStudio.Styles.ToggleButton.Switch" TargetType="ToggleButton">
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>
        <Setter Property="Background" Value="{DynamicResource MaterialDesignBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="6,0,0,0"/>
        <Setter Property="MinHeight" Value="{DynamicResource DefaultControlHeight}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="StoryboardChecked">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" Storyboard.TargetName="thumb">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="14">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="lightBorder">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="innerBorder">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="innerBorder">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="StoryboardUnChecked">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" Storyboard.TargetName="thumb">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="lightBorder">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="innerBorder">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="innerBorder">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Viewbox Width="{Binding Path=FontSize, RelativeSource={RelativeSource Mode=TemplatedParent},Converter={StaticResource MathConverter},ConverterParameter=25}">
                            <Grid Background="Transparent" SnapsToDevicePixels="True">                              
                                <Border Height="22" Width="36" x:Name="backBorder" Background="{DynamicResource MaterialDesignTextBoxBorder}" CornerRadius="11"/>
                                <Border Grid.Column="0" Height="22" Width="36" Opacity="0" x:Name="lightBorder" Background="{Binding Path=(controls:ControlAttach.Background),RelativeSource={RelativeSource TemplatedParent}}" CornerRadius="11" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                                <Border Grid.Column="0" Height="20" Margin="1" Background="{TemplateBinding Background}" CornerRadius="11" Name="innerBorder" RenderTransformOrigin=".8,0.5">
                                    <Border.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                        </TransformGroup>
                                    </Border.RenderTransform>
                                </Border>
                                <Grid Grid.Column="0" Margin="1">
                                    <Border HorizontalAlignment="Left" CornerRadius="10" Name="thumb" Effect="{StaticResource ShadowDepth2}" Background="White" Width="20" Height="20" RenderTransformOrigin="0.5,0.5">
                                        <Border.RenderTransform>
                                            <TransformGroup>
                                                <TranslateTransform/>
                                            </TransformGroup>
                                        </Border.RenderTransform>
                                    </Border>
                                </Grid>                               
                            </Grid>
                        </Viewbox>
                        <ContentPresenter x:Name="contentPresenter" 
                                              Visibility="Collapsed" 
                                              Grid.Column="1" 
                                              Focusable="False" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" 
                                              RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        <ContentPresenter x:Name="checkedPresenter"
                                              Visibility="Collapsed" 
                                              Grid.Column="1" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              FlowDirection="LeftToRight"
                                              Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ToggleButtonAttach.CheckedElement)}"
                                              ContentTemplate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ToggleButtonAttach.CheckedElementTemplate)}" 
                                              Margin="{TemplateBinding Padding}" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="Visibility" TargetName="contentPresenter" Value="Visible"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Mode=Self}}" Value="True" />
                                <Condition Binding="{Binding Path=(controls:ToggleButtonAttach.CheckedElement), RelativeSource={RelativeSource Mode=Self},Converter={StaticResource NullableToBoolConverter}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="contentPresenter" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="checkedPresenter" Value="Visible"/>
                        </MultiDataTrigger>
                        
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardChecked}"/>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardUnChecked}"/>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="controls:ControlAttach.Status" Value="Light">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource PrimaryHueLightBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Mid">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Dark">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource PrimaryHueDarkBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Accent">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource SecondaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Success">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource SuccessBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Info">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource InfoBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Warning">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource WarningBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Danger">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource DangerBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Plain">
                <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource MaterialDesignToolForeground}" />
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value=".9"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" Value=".6"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Panel.ZIndex" Value="{x:Static system:Int32.MaxValue}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--翻转-->
    <Style x:Key="AIStudio.Styles.ToggleButton.Action" TargetType="ToggleButton">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
        <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Height" Value="{DynamicResource AIStudio.Icon.Size.ExtraLarge}"/>
        <Setter Property="Width" Value="{DynamicResource AIStudio.Icon.Size.ExtraLarge}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ShadowAttach.DropShadowEffect),Converter={StaticResource ShadowConverter}}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.38" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="*" To="Checked">
                                        <Storyboard FillBehavior="HoldEnd">
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform">
                                                <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.0" />
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform">
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.2" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Checked" To="Unchecked">
                                        <Storyboard FillBehavior="HoldEnd">
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform">
                                                <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.0" />
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform">
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.2" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform"
                                                         To="0" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform"
                                                         To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform"
                                                         To="1" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform"
                                                         To="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="IndeterminateCheck"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="OffGrid" RenderTransformOrigin=".5,.5" Background="{TemplateBinding Background}">
                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                              FlowDirection="LeftToRight"/>
                            <Grid.Clip>
                                <EllipseGeometry RadiusX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width, Converter={StaticResource DivisionMathConverter}, ConverterParameter=2.0}" 
                                                 RadiusY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height, Converter={StaticResource DivisionMathConverter}, ConverterParameter=2.0}">
                                    <EllipseGeometry.Center>
                                        <MultiBinding Converter="{StaticResource PointValueConverter}">
                                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Width" Converter="{StaticResource DivisionMathConverter}" ConverterParameter="2.0" />
                                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Height" Converter="{StaticResource DivisionMathConverter}" ConverterParameter="2.0" />
                                        </MultiBinding>
                                    </EllipseGeometry.Center>
                                </EllipseGeometry>
                            </Grid.Clip>
                            <Grid.RenderTransform>
                                <ScaleTransform x:Name="OffScaleTransform" ScaleX="1" ScaleY="1" />
                            </Grid.RenderTransform>
                        </Grid>
                        <Grid x:Name="OnGrid" RenderTransformOrigin=".5,.5" Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              FlowDirection="LeftToRight"
                                              Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ToggleButtonAttach.CheckedElement)}"
                                              ContentTemplate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ToggleButtonAttach.CheckedElementTemplate)}" />
                            <Grid.Clip>
                                <EllipseGeometry RadiusX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width, Converter={StaticResource DivisionMathConverter}, ConverterParameter=2.0}" 
                                                 RadiusY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height, Converter={StaticResource DivisionMathConverter}, ConverterParameter=2.0}">
                                    <EllipseGeometry.Center>
                                        <MultiBinding Converter="{StaticResource PointValueConverter}">
                                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Width" Converter="{StaticResource DivisionMathConverter}" ConverterParameter="2.0" />
                                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Height" Converter="{StaticResource DivisionMathConverter}" ConverterParameter="2.0" />
                                        </MultiBinding>
                                    </EllipseGeometry.Center>
                                </EllipseGeometry>
                            </Grid.Clip>
                            <Grid.RenderTransform>
                                <ScaleTransform x:Name="OnScaleTransform" ScaleX="0" ScaleY="1" />
                            </Grid.RenderTransform>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="controls:ControlAttach.Status" Value="Light">
                            <Setter Property="Background" Value="{DynamicResource PrimaryHueLightBrush}" />
                        </Trigger>
                        <Trigger Property="controls:ControlAttach.Status" Value="Mid">
                            <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </Trigger>
                        <Trigger Property="controls:ControlAttach.Status" Value="Dark">
                            <Setter Property="Background" Value="{DynamicResource PrimaryHueDarkBrush}" />
                        </Trigger>
                        <Trigger Property="controls:ControlAttach.Status" Value="Accent">
                            <Setter Property="Background" Value="{DynamicResource SecondaryHueMidBrush}" />
                        </Trigger>
                        <Trigger Property="controls:ControlAttach.Status" Value="Success">
                            <Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
                        </Trigger>
                        <Trigger Property="controls:ControlAttach.Status" Value="Info">
                            <Setter Property="Background" Value="{DynamicResource InfoBrush}" />
                        </Trigger>
                        <Trigger Property="controls:ControlAttach.Status" Value="Warning">
                            <Setter Property="Background" Value="{DynamicResource WarningBrush}" />
                        </Trigger>
                        <Trigger Property="controls:ControlAttach.Status" Value="Danger">
                            <Setter Property="Background" Value="{DynamicResource DangerBrush}" />
                        </Trigger>
                        <Trigger Property="controls:ControlAttach.Status" Value="Plain">
                            <Setter Property="Background" Value="{DynamicResource MaterialDesignToolForeground}" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value=".9"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" Value=".6"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Panel.ZIndex" Value="{x:Static system:Int32.MaxValue}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AIStudio.Styles.ToggleButton.Flat" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
        <Setter Property="Height" Value="{DynamicResource AIStudio.Icon.Size.ExtraLarge}"/>
        <Setter Property="Width" Value="{DynamicResource AIStudio.Icon.Size.ExtraLarge}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid ClipToBounds="True" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.38" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="*" To="Checked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale">
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.0" />
                                                <LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.1" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale">
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.0" />
                                                <LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.1" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Checked" To="Unchecked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale">
                                                <LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.0" />
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale">
                                                <LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.0" />
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale" To="1.0" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale" To="1.0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale" To="0" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale" To="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Ellipse Fill="Transparent" x:Name="HoverEllipse" Stroke="Transparent" StrokeThickness="1" />
                        <Ellipse Fill="{TemplateBinding Background}" x:Name="CheckedEllipse" RenderTransformOrigin="0.5, 0.5">
                            <Ellipse.RenderTransform>
                                <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.0" ScaleY="1.0" x:Name="CheckedEllipseScale"/>
                            </Ellipse.RenderTransform>
                        </Ellipse>
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="HoverEllipse" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource MaterialDesignPaper}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="controls:ControlAttach.Status" Value="Light">
                <Setter Property="Background" Value="{DynamicResource PrimaryHueLightBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Mid">
                <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Dark">
                <Setter Property="Background" Value="{DynamicResource PrimaryHueDarkBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Accent">
                <Setter Property="Background" Value="{DynamicResource SecondaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Success">
                <Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Info">
                <Setter Property="Background" Value="{DynamicResource InfoBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Warning">
                <Setter Property="Background" Value="{DynamicResource WarningBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Danger">
                <Setter Property="Background" Value="{DynamicResource DangerBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Plain">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignToolForeground}" />
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value=".9"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" Value=".6"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Panel.ZIndex" Value="{x:Static system:Int32.MaxValue}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--自定义-->
    <Style x:Key="AIStudio.Styles.ToggleButton.Custom" TargetType="ToggleButton">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border x:Name="Chrome" SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <Grid>
                            <ContentPresenter Name="UnCheckedElement" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            <ContentPresenter Name="CheckedElement" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="Collapsed" Content="{Binding Path=(controls:ToggleButtonAttach.CheckedElement),RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="controls:ControlAttach.Status" Value="Light">
                            <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource PrimaryHueLightBrush}" />
                        </Trigger>
                        <Trigger Property="controls:ControlAttach.Status" Value="Mid">
                            <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </Trigger>
                        <Trigger Property="controls:ControlAttach.Status" Value="Dark">
                            <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource PrimaryHueDarkBrush}" />
                        </Trigger>
                        <Trigger Property="controls:ControlAttach.Status" Value="Accent">
                            <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource SecondaryHueMidBrush}" />
                        </Trigger>
                        <Trigger Property="controls:ControlAttach.Status" Value="Success">
                            <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource SuccessBrush}" />
                        </Trigger>
                        <Trigger Property="controls:ControlAttach.Status" Value="Info">
                            <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource InfoBrush}" />
                        </Trigger>
                        <Trigger Property="controls:ControlAttach.Status" Value="Warning">
                            <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource WarningBrush}" />
                        </Trigger>
                        <Trigger Property="controls:ControlAttach.Status" Value="Danger">
                            <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource DangerBrush}" />
                        </Trigger>
                        <Trigger Property="controls:ControlAttach.Status" Value="Plain">
                            <Setter Property="controls:ControlAttach.Background" Value="{DynamicResource MaterialDesignToolForeground}" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value=".9"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" Value=".6"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="CheckedElement"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="controls:ToggleButtonAttach.HideUncheckedElement" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="UnCheckedElement"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AIStudio.Styles.ComboToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignToolForeground}" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="controls:IconAttach.Width" Value="{DynamicResource AIStudio.Icon.Size.Small}"/>
        <Setter Property="controls:IconAttach.Height" Value="{DynamicResource AIStudio.Icon.Size.Small}"/>
        <Setter Property="controls:IconAttach.Geometry" Value="{StaticResource DownGeometry}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Grid">
                        <!--<AdornerDecorator Grid.ColumnSpan="2" CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(controls:ControlAttach.CacheMode)}">-->
                        <Border x:Name="border" 
                                    Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Background}" 
                                    CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(controls:ControlAttach.CornerRadius)}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Padding="{TemplateBinding Padding}">
                            <Path x:Name="Arrow"
                                      Width="{TemplateBinding controls:IconAttach.Width}"
                                      Height="{TemplateBinding controls:IconAttach.Height}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Fill="{TemplateBinding Foreground}"
                                      Data="{TemplateBinding controls:IconAttach.Geometry}"
                                      IsHitTestVisible="false"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                      Stretch="Uniform" 
                                      RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <RotateTransform />
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                        <!--</AdornerDecorator>-->

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                         To="180"
                                                         Duration="0:0:0.2" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                         To="0"
                                                         Duration="0:0:0.2" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <!--z触发器-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="Arrow"  Value="{Binding Foreground,
                                RelativeSource={RelativeSource Mode=TemplatedParent},
                                Converter={StaticResource BrushOpacityConverter},
                                ConverterParameter=0.6}" />
                            <Setter Property="Opacity" TargetName="border" Value="0.55" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="Arrow" Value="{Binding Foreground,
                                RelativeSource={RelativeSource Mode=TemplatedParent},
                                Converter={StaticResource BrushOpacityConverter},
                                ConverterParameter=0.8}" />
                            <Setter Property="Opacity" TargetName="border" Value="0.6" />
                        </Trigger>
                        <!--<Trigger Property="IsChecked" Value="True">
                            <Setter Property="Fill" TargetName="Arrow" Value="{Binding Foreground,
                                RelativeSource={RelativeSource Mode=TemplatedParent},
                                Converter={StaticResource BrushOpacityConverter},
                                ConverterParameter=0.8}" />
                            <Setter Property="Opacity" TargetName="border" Value="0.6" />
                        </Trigger>-->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5" TargetName="Grid"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AIStudio.Styles.ComboToggleButton.Standard" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="controls:ControlAttach.CornerRadius" Value="{DynamicResource DefaultCornerRadius}" />
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="controls:IconAttach.Width" Value="{DynamicResource AIStudio.Icon.Size.Small}"/>
        <Setter Property="controls:IconAttach.Height" Value="{DynamicResource AIStudio.Icon.Size.Small}"/>
        <Setter Property="controls:IconAttach.Geometry" Value="{StaticResource DownGeometry}"/>
        <Setter Property="controls:RippleAssist.Feedback" Value="White" />
        <Setter Property="controls:ShadowAttach.DropShadowEffect" Value="{StaticResource ShadowDepth1}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <!--<AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(controls:ControlAttach.CacheMode)}">-->
                        <Border x:Name="border" 
                                Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Background}" 
                                CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(controls:ControlAttach.CornerRadius)}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ShadowAttach.DropShadowEffect),Converter={StaticResource ShadowConverter}}"/>
                        <!--</AdornerDecorator>-->
                        <controls:Ripple Focusable="False" 
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" 
                                         Padding="{TemplateBinding Padding}" 
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <controls:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </controls:Ripple.Clip>
                            <Path x:Name="Arrow"
                                      Width="{TemplateBinding controls:IconAttach.Width}"
                                      Height="{TemplateBinding controls:IconAttach.Height}"
                                      Fill="{TemplateBinding Foreground}"
                                      Data="{TemplateBinding controls:IconAttach.Geometry}"
                                      IsHitTestVisible="false"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                      Stretch="Uniform" 
                                      RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <RotateTransform />
                                </Path.RenderTransform>
                            </Path>
                        </controls:Ripple>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                         To="180"
                                                         Duration="0:0:0.2" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                         To="0"
                                                         Duration="0:0:0.2" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--设置鼠标进入时的背景、前景样式-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="controls:ShadowAttach.Darken" Value="True" />
                        </Trigger>
                        <!--鼠标按下时的前景、背景样式-->
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="border" Property="controls:ShadowAttach.Darken" Value="True" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="controls:ControlAttach.Status" Value="Light">
                <Setter Property="Background" Value="{DynamicResource PrimaryHueLightBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueLightBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueLightForegroundBrush}"/>
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Mid">
                <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Dark">
                <Setter Property="Background" Value="{DynamicResource PrimaryHueDarkBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueDarkBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}"/>
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Accent">
                <Setter Property="Background" Value="{DynamicResource SecondaryHueMidBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryHueMidBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBackground}"/>
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Success">
                <Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SuccessBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBackground}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Info">
                <Setter Property="Background" Value="{DynamicResource InfoBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource InfoBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBackground}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Warning">
                <Setter Property="Background" Value="{DynamicResource WarningBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource WarningBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBackground}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Danger">
                <Setter Property="Background" Value="{DynamicResource DangerBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource DangerBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBackground}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Plain">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignToolForeground}" />
                <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignToolForeground}"/>
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignToolBackground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AIStudio.Styles.ComboToggleButton.Flat" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="controls:ControlAttach.CornerRadius" Value="{DynamicResource DefaultCornerRadius}" />
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="controls:IconAttach.Width" Value="{DynamicResource AIStudio.Icon.Size.Small}"/>
        <Setter Property="controls:IconAttach.Height" Value="{DynamicResource AIStudio.Icon.Size.Small}"/>
        <Setter Property="controls:IconAttach.Geometry" Value="{StaticResource DownGeometry}"/>
        <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <!--<AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(controls:ControlAttach.CacheMode)}">-->
                        <Border x:Name="border" 
                                Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Background}" 
                                CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(controls:ControlAttach.CornerRadius)}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ShadowAttach.DropShadowEffect),Converter={StaticResource ShadowConverter}}"/>
                        <!--</AdornerDecorator>-->
                        <controls:Ripple Focusable="False" 
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" 
                                         Padding="{TemplateBinding Padding}" 
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <controls:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </controls:Ripple.Clip>
                            <Path x:Name="Arrow"
                                      Width="{TemplateBinding controls:IconAttach.Width}"
                                      Height="{TemplateBinding controls:IconAttach.Height}"
                                      Fill="{TemplateBinding Foreground}"
                                      Data="{TemplateBinding controls:IconAttach.Geometry}"
                                      IsHitTestVisible="false"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                      Stretch="Uniform" 
                                      RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <RotateTransform />
                                </Path.RenderTransform>
                            </Path>
                        </controls:Ripple>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                         To="180"
                                                         Duration="0:0:0.2" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                         To="0"
                                                         Duration="0:0:0.2" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--设置鼠标进入时的背景、前景样式-->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding Foreground,
                                RelativeSource={RelativeSource Mode=TemplatedParent},
                                Converter={StaticResource BrushOpacityConverter},
                                ConverterParameter=0.16}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="controls:ControlAttach.Status" Value="Light">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueLightBrush}"/>
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource PrimaryHueLightBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Mid">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Dark">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkBrush}"/>
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource PrimaryHueDarkBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Accent">
                <Setter Property="Foreground" Value="{DynamicResource SecondaryHueMidBrush}"/>
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource SecondaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Success">
                <Setter Property="Foreground" Value="{DynamicResource SuccessBrush}" />
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource SuccessBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Info">
                <Setter Property="Foreground" Value="{DynamicResource InfoBrush}" />
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource InfoBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Warning">
                <Setter Property="Foreground" Value="{DynamicResource WarningBrush}" />
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource WarningBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Danger">
                <Setter Property="Foreground" Value="{DynamicResource DangerBrush}" />
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource DangerBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Plain">
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignToolForeground}" />
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignToolForeground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AIStudio.Styles.ComboToggleButton.Outlined" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="controls:ControlAttach.CornerRadius" Value="{DynamicResource DefaultCornerRadius}" />
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="controls:IconAttach.Width" Value="{DynamicResource AIStudio.Icon.Size.Small}"/>
        <Setter Property="controls:IconAttach.Height" Value="{DynamicResource AIStudio.Icon.Size.Small}"/>
        <Setter Property="controls:IconAttach.Geometry" Value="{StaticResource DownGeometry}"/>
        <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <!--<AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(controls:ControlAttach.CacheMode)}">-->
                        <Border x:Name="border" 
                                Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Background}" 
                                CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(controls:ControlAttach.CornerRadius)}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ShadowAttach.DropShadowEffect),Converter={StaticResource ShadowConverter}}"/>
                        <!--</AdornerDecorator>-->
                        <controls:Ripple Focusable="False" 
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" 
                                         Padding="{TemplateBinding Padding}" 
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <controls:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </controls:Ripple.Clip>
                            <Path x:Name="Arrow"
                                      Width="{TemplateBinding controls:IconAttach.Width}"
                                      Height="{TemplateBinding controls:IconAttach.Height}"
                                      Fill="{TemplateBinding Foreground}"
                                      Data="{TemplateBinding controls:IconAttach.Geometry}"
                                      IsHitTestVisible="false"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                      Stretch="Uniform" 
                                      RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <RotateTransform />
                                </Path.RenderTransform>
                            </Path>
                        </controls:Ripple>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                         To="180"
                                                         Duration="0:0:0.2" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                         To="0"
                                                         Duration="0:0:0.2" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--设置鼠标进入时的背景、前景样式-->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding Foreground,
                                RelativeSource={RelativeSource Mode=TemplatedParent},
                                Converter={StaticResource BrushOpacityConverter},
                                ConverterParameter=0.16}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="controls:ControlAttach.Status" Value="Light">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueLightBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueLightBrush}"/>
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource PrimaryHueLightBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Mid">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Dark">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueDarkBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkBrush}"/>
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource PrimaryHueDarkBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Accent">
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryHueMidBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource SecondaryHueMidBrush}"/>
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource SecondaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Success">
                <Setter Property="BorderBrush" Value="{DynamicResource SuccessBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource SuccessBrush}" />
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource SuccessBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Info">
                <Setter Property="BorderBrush" Value="{DynamicResource InfoBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource InfoBrush}" />
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource InfoBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Warning">
                <Setter Property="BorderBrush" Value="{DynamicResource WarningBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource WarningBrush}" />
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource WarningBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Danger">
                <Setter Property="BorderBrush" Value="{DynamicResource DangerBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource DangerBrush}" />
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource DangerBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Plain">
                <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignToolForeground}"/>
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignToolForeground}" />
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignToolForeground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AIStudio.Styles.ComboToggleButton.Plain" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="controls:ControlAttach.CornerRadius" Value="{DynamicResource DefaultCornerRadius}" />
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="controls:IconAttach.Width" Value="{DynamicResource AIStudio.Icon.Size.Small}"/>
        <Setter Property="controls:IconAttach.Height" Value="{DynamicResource AIStudio.Icon.Size.Small}"/>
        <Setter Property="controls:IconAttach.Geometry" Value="{StaticResource DownGeometry}"/>
        <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <!--<AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(controls:ControlAttach.CacheMode)}">-->
                        <Border x:Name="border" 
                                Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Background}" 
                                CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(controls:ControlAttach.CornerRadius)}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ShadowAttach.DropShadowEffect),Converter={StaticResource ShadowConverter}}"/>
                        <!--</AdornerDecorator>-->
                        <controls:Ripple Focusable="False" 
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" 
                                         Padding="{TemplateBinding Padding}" 
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <controls:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </controls:Ripple.Clip>
                            <Path x:Name="Arrow"
                                      Width="{TemplateBinding controls:IconAttach.Width}"
                                      Height="{TemplateBinding controls:IconAttach.Height}"
                                      Fill="{TemplateBinding Foreground}"
                                      Data="{TemplateBinding controls:IconAttach.Geometry}"
                                      IsHitTestVisible="false"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                      Stretch="Uniform" 
                                      RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <RotateTransform />
                                </Path.RenderTransform>
                            </Path>
                        </controls:Ripple>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                         To="180"
                                                         Duration="0:0:0.2" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                         To="0"
                                                         Duration="0:0:0.2" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--设置鼠标进入时的背景、前景样式-->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="Arrow" Value="{Binding Foreground,
                                RelativeSource={RelativeSource Mode=TemplatedParent},
                                Converter={StaticResource BrushOpacityConverter},
                                ConverterParameter=0.6}" />
                        </Trigger>
                        <!--鼠标按下时的前景、背景样式-->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="Arrow" Value="{Binding Foreground,
                                RelativeSource={RelativeSource Mode=TemplatedParent},
                                Converter={StaticResource BrushOpacityConverter},
                                ConverterParameter=0.8}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="controls:ControlAttach.Status" Value="Light">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueLightBrush}"/>
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource PrimaryHueLightBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Mid">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Dark">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkBrush}"/>
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource PrimaryHueDarkBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Accent">
                <Setter Property="Foreground" Value="{DynamicResource SecondaryHueMidBrush}"/>
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource SecondaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Success">
                <Setter Property="Foreground" Value="{DynamicResource SuccessBrush}" />
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource SuccessBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Info">
                <Setter Property="Foreground" Value="{DynamicResource InfoBrush}" />
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource InfoBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Warning">
                <Setter Property="Foreground" Value="{DynamicResource WarningBrush}" />
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource WarningBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Danger">
                <Setter Property="Foreground" Value="{DynamicResource DangerBrush}" />
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource DangerBrush}" />
            </Trigger>
            <Trigger Property="controls:ControlAttach.Status" Value="Plain">
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignToolForeground}" />
                <Setter Property="controls:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignToolForeground}"/>
            </Trigger>

            <DataTrigger Binding="{Binding Path=(controls:IconAttach.Geometry),RelativeSource={RelativeSource Mode=Self},Converter={StaticResource NullableToBoolConverter}}" Value="false">
                <Setter Property="controls:IconAttach.Width" Value="{DynamicResource AIStudio.Icon.Size.Small}"/>
                <Setter Property="controls:IconAttach.Height" Value="{DynamicResource AIStudio.Icon.Size.Small}"/>
                <Setter Property="controls:ControlAttach.IconContent">
                    <Setter.Value>
                        <ControlTemplate TargetType="Control">
                            <Path x:Name="icon" 
                                Width="{Binding Path=(controls:IconAttach.Width),RelativeSource={RelativeSource AncestorType=ButtonBase}}" 
                                Height="{Binding Path=(controls:IconAttach.Height),RelativeSource={RelativeSource AncestorType=ButtonBase}}" 
                                Fill="{Binding Path=(TextElement.Foreground),RelativeSource={RelativeSource Mode=TemplatedParent}}" 
                                SnapsToDevicePixels="True" 
                                Stretch="Uniform" 
                                Data="{Binding Path=(controls:IconAttach.Geometry),RelativeSource={RelativeSource AncestorType=ButtonBase}}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AIStudio.Styles.TreeToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignToolForeground}" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="controls:IconAttach.Width" Value="{DynamicResource AIStudio.Icon.Size.Small}"/>
        <Setter Property="controls:IconAttach.Height" Value="{DynamicResource AIStudio.Icon.Size.Small}"/>
        <Setter Property="controls:IconAttach.Geometry" Value="{StaticResource FillUpGeometry}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Grid">
                        <!--<AdornerDecorator Grid.ColumnSpan="2" CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(controls:ControlAttach.CacheMode)}">-->
                        <Border x:Name="border" 
                                    Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Background}" 
                                    CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(controls:ControlAttach.CornerRadius)}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Padding="{TemplateBinding Padding}">
                            <Path x:Name="Arrow"
                                      Width="{TemplateBinding controls:IconAttach.Width}"
                                      Height="{TemplateBinding controls:IconAttach.Height}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Fill="Transparent"
                                      Stroke="{TemplateBinding Foreground}"
                                      StrokeThickness="1"
                                      Data="{TemplateBinding controls:IconAttach.Geometry}"
                                      IsHitTestVisible="false"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                      Stretch="Uniform" 
                                      RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <RotateTransform />
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                        <!--</AdornerDecorator>-->

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                         To="-45"
                                                         Duration="0:0:0.1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                         To="-90"
                                                         Duration="0:0:0.1" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <!--z触发器-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="Arrow"  Value="{Binding Foreground,
                                RelativeSource={RelativeSource Mode=TemplatedParent},
                                Converter={StaticResource BrushOpacityConverter},
                                ConverterParameter=0.6}" />
                            <Setter Property="Opacity" TargetName="border" Value="0.55" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="Arrow" Value="{Binding Foreground,
                                RelativeSource={RelativeSource Mode=TemplatedParent},
                                Converter={StaticResource BrushOpacityConverter},
                                ConverterParameter=0.8}" />
                            <Setter Property="Opacity" TargetName="border" Value="0.6" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5" TargetName="Grid"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>    

    <Style x:Key="AIStudio.Styles.ComboToggleButton.Half" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MahApps.Brushes.Gray}"/>
        <Setter Property="controls:ControlAttach.Foreground" Value="{DynamicResource MahApps.Brushes.Highlight}" />
        <Setter Property="controls:ControlAttach.MouseOverForeground" Value="{DynamicResource MahApps.Brushes.AccentBase}" />
        <Setter Property="controls:ControlAttach.PressedForeground" Value="{DynamicResource MahApps.Brushes.Highlight}" />
        <Setter Property="controls:ControlAttach.BorderThickness" Value="0" />
        <Setter Property="controls:ControlAttach.Margin" Value="0" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Grid" >
                        <!--<AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(controls:ControlAttach.CacheMode)}">-->
                        <Border x:Name="border" 
                                    Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Background}" 
                                    CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(controls:ControlAttach.CornerRadius)}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Padding="{TemplateBinding Padding}">

                        </Border>
                        <!--</AdornerDecorator>-->
                        <Path x:Name="BtnArrow"
                                      Width="8"
                                      Height="4"
                                      HorizontalAlignment="Center"
                                      Fill="{TemplateBinding Foreground}"
                                      Data="F1 M 301.14,-189.041L 311.57,-189.041L 306.355,-182.942L 301.14,-189.041 Z "
                                      IsHitTestVisible="false"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      Stretch="Uniform" />
                    </Grid>
                    <!--z触发器-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="BtnArrow" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(controls:ControlAttach.MouseOverForeground)}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(controls:ControlAttach.MouseOverForeground)}" />
                            <Setter Property="BorderThickness" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(controls:ControlAttach.BorderThickness)}" />
                            <Setter Property="Margin" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(controls:ControlAttach.Margin)}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="BtnArrow" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(controls:ControlAttach.PressedForeground)}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(controls:ControlAttach.PressedForeground)}" />
                            <Setter Property="BorderThickness" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(controls:ControlAttach.BorderThickness)}" />
                            <Setter Property="Margin" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(controls:ControlAttach.Margin)}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Fill" TargetName="BtnArrow" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(controls:ControlAttach.Foreground)}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(controls:ControlAttach.Foreground)}" />
                            <Setter Property="BorderThickness" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(controls:ControlAttach.BorderThickness)}" />
                            <Setter Property="Margin" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(controls:ControlAttach.Margin)}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5" TargetName="Grid"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AIStudio.Styles.ComboToggleButton.Half.Transparent" BasedOn="{StaticResource AIStudio.Styles.ComboToggleButton.Half}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="Transparent" />
        <Setter Property="controls:ControlAttach.Foreground" Value="Transparent" />
        <Setter Property="controls:ControlAttach.MouseOverForeground" Value="Transparent" />
        <Setter Property="controls:ControlAttach.PressedForeground" Value="Transparent" />
    </Style>
</ResourceDictionary>